% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stem_points_methods.R
\name{stm.eigen.voxel}
\alias{stm.eigen.voxel}
\title{Stem denoising algorithm: Voxel geometry + voting}
\usage{
stm.eigen.voxel(
  h_step = 0.5,
  max_curvature = 0.1,
  max_verticality = 10,
  voxel_spacing = 0.025,
  max_d = 0.5,
  votes_weight = 0.2,
  v3d = FALSE
)
}
\arguments{
\item{h_step}{\code{numeric} - height interval to perform point filtering/assignment/classification.}

\item{max_curvature}{\code{numeric} - maximum curvature (from 0 to 1) accepted when filtering a point neighborhood.}

\item{max_verticality}{\code{numeric} - maximum deviation of a point neighborhood's orientation from an absolute vertical axis ( Z = c(0,0,1) ), in \emph{degrees} (from 0 to 90).}

\item{voxel_spacing}{\code{numeric} - voxel side length.}

\item{max_d}{\code{numeric} - maximum diameter tolerated for a tree segment.}

\item{votes_weight}{\code{numeric} - fraction of votes a point neighborhood needs do reach in order to belong to a stem - in relation to the voxel with most votes with the same \emph{TreeID}.}

\item{v3d}{\code{logical} - count votes in 3D voxels (TRUE) or 2D pixels (FALSE).}
}
\description{
This function is meant to be used inside \code{\link{stemPoints}}. It filters points based on their voxel geometries (check \code{\link{fastPointMetrics}}) and assign them to stem patches if reaching a voxel with enough votes.
}
